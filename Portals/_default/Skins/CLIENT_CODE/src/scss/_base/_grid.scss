//
// Container
// =========

.container,
.container-fluid {
  padding-right: 1.5rem;
  padding-left: 1.5rem;

  @include media-breakpoint-up(md) {
    padding-right: 5vw;
    padding-left: 5vw;
  }
}

.container {
  width: 100%;
  max-width: 100rem;
}




//
// CSS Grid
// ========
//
// Utility classes to create CSS Grid layouts. Not part of Bootstrap v4.
// ----------------------------------------------------------------------------

$grid-gap: $grid-gutter-width;
$grid-variant-max-cols: 4;

.grid {
  @supports not (display: grid) {
    display: flex;
    flex-wrap: wrap;

    & > * {
      flex-basis: 100%;
      margin-bottom: $grid-gap;
    }
  }

  @supports (display: grid) {
    display: grid;
    grid-template-columns: repeat(1, 1fr);
    gap: $grid-gap;
  }
}

// It's "from 2" because `.grid` defaults to one column,
// so there's no need to generate that unnecessary class.
@for $i from 2 through $grid-variant-max-cols {
  .grid--#{$i}-columns {
    @supports not (display: grid) {
      & > * {
        padding-right: $grid-gap / 2;
        padding-left: $grid-gap / 2;

        @if ($i < 4) {
          @include media-breakpoint-up(md) {
            flex-basis: calc(100% / #{$i});
          }
        }

        // 4 or more columns and the column number is even
        @else if ($i % 2 == 0) {
          @include media-breakpoint-up(md) {
            flex-basis: calc(100% / #{$i / 2});
          }
          @include media-breakpoint-up(lg) {
            flex-basis: calc(100% / #{$i});
          }
        }

        // 4 or more columns and the column number is odd
        @else {
          @include media-breakpoint-up(md) {
            flex-basis: calc(100% / #{($i - 1) / 2});
          }
          @include media-breakpoint-up(lg) {
            flex-basis: calc(100% / #{$i});
          }
        }
      }
    }

    @supports (display: grid) {
      @include media-breakpoint-up(md) {
        grid-template-columns: repeat($i, 1fr);
      }
    }
  }
}
